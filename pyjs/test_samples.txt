# Input file for testing pyjs compiler.
# 
# Each test starts with a === followed by a new line and contains python code and expected javascript code separated by ---.
#
# Line starting with # are considered as comments and are ignored.

===
# hello world

"hello world"

---

"hello world"

===
# hello world2

r"hello\nworld"

---

"hello\\nworld"

===
# hello world3

"""
hello
world
"""
---

"\nhello\nworld\n"

===

# simple function

def f(x):
    return x

---

function f(x) {
    return x;
}

===
# vars

def add(x, y):
    sum = x + y
    return sum

---

function add(x, y) {
    var sum;
    sum = x + y;
    return sum;
}

===

# vars with loops

def sigma(n):
    sum = 0
    for i in range(1, n):
        sum += i
    return sum
    
---

function sigma(n) {
	var sum;
	sum = 0;
	for (var __i in py.iter(range(1, n))) {
		i = py.loopvalue;
		sum += i;
	}
	return sum;
}

===

# test if

if a == 0: b = 0

---
if (a == 0) {
    b = 0;
}

===
# more if tests

if a < 0: b = 0
if a > 0: b = 0
if a > 0 and a < 10: b = 0
if a in x: b = 1
if a not in x: b = 1

---
if (a < 0) { b = 0; }
if (a > 0) { b = 0; }
if (a > 0 && a < 10) { b = 0; }

if (py.in(a, x)) { b = 1; }
if (!py.in(a, x)) { b = 1; }

===

# multiple assignments

a, b = c

--- 

py.tmp = c;
a = py.tmp[0];
b = py.tmp[1];

===

# globals

def f(x):
    global y
    y = y + x
    
---

function f(x) {
    y = y + x;
}

===
# getattr

a.x = b.y
(a1 + a2).x = b.y

x = a.f()

---

a.x = py.getattr(b, "y");
(a1 + a2).x = py.getattr(b, "y");
x = py.getattr(a, "f")();

===
# if 

if a > 0:
    x = a
else:
    x = -a

--- 

if (a > 0) {
    x = a;
}
else {
    x = -a;
}

===
# while

def fact(n):
    product = 1
    while n > 0:
        product *= n
        n = n - 1
    return product
    
---

function fact(n) {
    var product;
    product = 1;
    while (n > 0) {
        product *= n;
        n = n - 1;
    }
    return product;
}

===

# for

product = 1
for a, b in x:
    product *= a

---

product = 1;
for (var __i in py.iter(x)) {
	py.tmp = py.loopvalue; a = py.tmp[0]; b = py.tmp[1];
    product *= a;
}

